// SPDX-License-Identifier: MIT

pragma solidity ^0.8.4;

import "../interfaces/IBetSlips.sol";
import "./BaseGame.sol";

contract RouletteGame is BaseGame {

    enum RouletteGameChoice {
        RED,
        GREEN,
        YELLOW
    }

    mapping(string => string) _playerChoices;

    constructor(address betSlipsAddr, uint256 rtp) {
        _betSlipsAddr = payable(betSlipsAddr);
        _rtp = rtp;
        gameCode = "roulette";
    }

    function getOdds(uint8 selectedColor)
        private
        view
        returns (uint256)
    {
        uint16[3] memory probability = [46667, 46667, 6666];

        uint256 odds = _rtp * 100000 / probability[selectedColor];
        return odds;
    }

    function revealSeed(
        string memory seedHash, 
        string memory seed
    ) public {
        require(SeedUtility.compareSeed(seedHash, seed) == true, "Invalid seed");

        IBetSlips.BetSlip memory betSlip = IBetSlips(_betSlipsAddr).getBetSlip(
            seedHash
        );

        // The value generated by getHashNumber is one that has 9 digits integer.
        // hitNumber is integer that 8 digits of aboved integer from the lowest digit.
        uint256 hitNumber = SeedUtility.getHashNumber(seed) % (10**8);
        string memory hitColor = getHitColor(hitNumber);

        string memory selectedColor = _playerChoices[seedHash];

        uint256 returnAmount;
        if (keccak256(abi.encodePacked((selectedColor))) ==
            keccak256(abi.encodePacked((hitColor))))
        {
            returnAmount = (betSlip.wagerAmount * betSlip.odds) / 100;           
        } else {
            returnAmount = 0;
        }

        IBetSlips(_betSlipsAddr).completeBet(
            seedHash,
            seed,
            betSlip.playerGameChoice,
            hitColor,
            returnAmount,
            betSlip.odds
        );
    }

    function placeBet(
        uint256 wagerAmount,
        string memory choice,
        string memory seedHash,
        address token
    ) public whenNotPaused{
        placeBetSlip(wagerAmount, choice, seedHash, token, 0, 0, 0, 0);
    }

    function placeBetWithPermit(
        uint256 wagerAmount,
        string memory choice,
        string memory seedHash,
        address token,
        uint256 deadLine,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) public whenNotPaused{
        placeBetSlip(wagerAmount, choice, seedHash, token, deadLine, v, r, s);
    }

    function placeBetSlip(
        uint256 wagerAmount,
        string memory choice,
        string memory seedHash,
        address token,
        uint256 deadLine,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) private {
        RouletteGameChoice selectedColor;

        if (
            keccak256(abi.encodePacked((choice))) ==
            keccak256(abi.encodePacked(("RED")))
        ) {
            selectedColor = RouletteGameChoice.RED;
        } else if (
            keccak256(abi.encodePacked((choice))) ==
            keccak256(abi.encodePacked(("GREEN")))
        ) {
            selectedColor = RouletteGameChoice.GREEN;
        } else if (
            keccak256(abi.encodePacked((choice))) ==
            keccak256(abi.encodePacked(("YELLOW")))
        ) {
            selectedColor = RouletteGameChoice.YELLOW;
        } else {
            revert("The choice is invalid");
        }

        require(
            wagerAmount >= _betLimits[token].minAmount && wagerAmount <= _betLimits[token].maxAmount,
            "The WagerAmount is invalid"
        );

        uint256 odds = getOdds(uint8(selectedColor));

        IBetSlips(_betSlipsAddr).placeBetSlip(
            msg.sender,
            token,
            wagerAmount,
            gameCode,
            choice,
            seedHash,
            odds,
            deadLine,
            v,
            r,
            s
        );

        _playerChoices[seedHash] = choice;
    }

    function getHitColor(uint256 hitNumber)
        private
        pure
        returns (string memory hitColor)
    {
        // convert 8 ditgits of decimal to integer: 0.46667 -> 46667000
        uint32[3] memory hitRange = [46667000, 46667000*2, 46667000*2+6666000];

        if (hitNumber > 0 && hitNumber < hitRange[0])
            hitColor = "RED";
        else if (hitNumber >= hitRange[0] && hitNumber < hitRange[1])
            hitColor = "GREEN";
        else if (hitNumber >= hitRange[1] && hitNumber < hitRange[2])
            hitColor = "YELLOW";
    }
}
